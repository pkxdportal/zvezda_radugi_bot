import os
import re
import random
import logging
from pathlib import Path
from datetime import datetime, timedelta, timezone, date, time as dtime
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, MessageHandler, ContextTypes, filters, JobQueue
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("sweet_or_curse")

# ---------- .ENV ----------
BASE_DIR = Path(__file__).resolve().parent  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: __file__
load_dotenv(BASE_DIR / ".env")

BOT_TOKEN = os.getenv("BOT_TOKEN")
PORTAL_CHAT_ID = int(os.getenv("PORTAL_CHAT_ID", "0"))
GAME_TIME_MSK = os.getenv("GAME_TIME_MSK", "19:00")
ROUND_SECONDS = int(os.getenv("ROUND_SECONDS", "120"))
# –¥–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç—ã—Ö
OWNER_IDS = [int(x) for x in os.getenv("OWNER_IDS", "").replace(" ", "").split(",") if x.isdigit()]

# üî∂ –ù–û–í–û–ï: –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ-–∏–Ω—Ç—Ä–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é intro.jpg —Ä—è–¥–æ–º —Å bot.py)
INTRO_IMAGE_PATH = os.getenv("INTRO_IMAGE_PATH", str(BASE_DIR / "intro.jpg"))

# –ü–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–æ–∫—Ç—è–±—Ä—å)
WINDOW_START = os.getenv("WINDOW_START", "10-17")  # –º–µ—Å—è—Ü-–¥–µ–Ω—å
WINDOW_END   = os.getenv("WINDOW_END",   "10-31")

MSK = ZoneInfo("Europe/Moscow")
UTC = timezone.utc

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
def _parse_mm_dd(mmdd: str, year: int) -> date:
    m, d = map(int, mmdd.split("-"))
    return date(year, m, d)

def in_window(dt: date) -> bool:
    start = _parse_mm_dd(WINDOW_START, dt.year)
    end   = _parse_mm_dd(WINDOW_END, dt.year)
    return start <= dt <= end

def norm(text: str) -> str:
    return re.sub(r"\s+", " ", text.strip().lower())

def fmt_duration(seconds: int) -> str:
    return f"{seconds} —Å–µ–∫." if seconds < 60 else f"{seconds // 60} –º–∏–Ω."

def display_name(u) -> str:
    name = u.full_name or (u.first_name or "")
    if u.username:
        name += f" (@{u.username})"
    return name.strip()

def coin() -> str:
    return random.choice(["–æ—Ä—ë–ª", "—Ä–µ—à–∫–∞"])

# ---------- –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ----------
GAMES = {}  # chat_id -> state

def new_game_state(chat_id: int) -> dict:
    return {
        "active": False,
        "round": 0,
        "prompt_msg_id": None,
        "deadline_utc": None,
        "answers": {},          # round -> { user_id: {"choice": "...", "name": "..."} }
        "survivors": None,      # set(user_id)
        "finalists_names": {},  # user_id -> name
        "last_thread_id": None, # message_id –¥–ª—è —Ä–µ–ø–ª–∞–µ–≤
    }

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≠ –ó–≤–µ–∑–¥–∞ –†–∞–¥—É–≥–∏ –≥–æ—Ç–æ–≤–∞ –∫ –•—ç–ª–ª–æ—É–∏–Ω—É! üåàüç¨\n"
        "–ò–≥—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º –≤ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.\n"
        "31 –æ–∫—Ç—è–±—Ä—è ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–π.\n"
        "–í–ª–∞–¥–µ–ª—å—Ü—ã –º–æ–≥—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ /force_start."
    )

def is_owner(user_id: int) -> bool:
    return user_id in OWNER_IDS if OWNER_IDS else True

async def force_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_owner(update.effective_user.id):
        return
    await launch_game(context.application, update.effective_chat.id)

# üîπ –ù–û–í–û–ï: —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    g = GAMES.get(chat_id)
    if not g or not g.get("active"):
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return

    r = g.get("round", 0)
    survivors = g.get("survivors")
    survivors_count = len(survivors) if survivors else 0

    lines = [f"üìä –ò–≥—Ä–∞ –∏–¥—ë—Ç. –†–∞—É–Ω–¥ {r}."]
    if survivors is not None:
        lines.append(f"üë• –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: {survivors_count}.")
    if g.get("deadline_utc"):
        now = datetime.now(UTC)
        if now < g["deadline_utc"]:
            remaining = int((g["deadline_utc"] - now).total_seconds())
            lines.append(f"‚è≥ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: {fmt_duration(remaining)}.")
    await update.message.reply_text("\n".join(lines))

# üîπ –ù–û–í–û–ï: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã
async def force_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_owner(update.effective_user.id):
        return
    chat_id = update.effective_chat.id
    g = GAMES.get(chat_id)
    if not g or not g.get("active"):
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
        return
    # –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º: —Ñ–ª–∞–≥ + —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    GAMES[chat_id] = new_game_state(chat_id)
    await update.message.reply_text("‚õî –ò–≥—Ä–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º.")

# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------
async def schedule_jobs(app: Application):
    hour, minute = map(int, GAME_TIME_MSK.split(":"))

    # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (tz-aware)
    run_time = dtime(hour=hour, minute=minute, tzinfo=MSK)

    # –£–∏–∫–µ–Ω–¥—ã ‚Äî –°—É–±–±–æ—Ç–∞(5) –∏ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ(6)
    for weekday in (5, 6):
        app.job_queue.run_daily(
            callback=scheduled_game,
            time=run_time,                     # tz-aware time
            days=(weekday,),
            data={"chat_id": PORTAL_CHAT_ID, "force": False},
            name=f"weekend_game_{weekday}",
        )

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å ‚Äî 31 –æ–∫—Ç—è–±—Ä—è (–ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏), –±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    today = datetime.now(MSK).date()
    this_year_end = _parse_mm_dd(WINDOW_END, today.year)
    run_year = today.year if today <= this_year_end else today.year + 1
    final_day = _parse_mm_dd(WINDOW_END, run_year)
    final_dt = datetime(final_day.year, final_day.month, final_day.day, hour, minute, tzinfo=MSK)

    app.job_queue.run_once(
        scheduled_game,
        when=final_dt,  # tz-aware datetime
        data={"chat_id": PORTAL_CHAT_ID, "force": True},
        name=f"final_day_{final_day.isoformat()}",
    )
    log.info(f"üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: —É–∏–∫–µ–Ω–¥—ã {WINDOW_START}‚Äì{WINDOW_END} –∏ —Ñ–∏–Ω–∞–ª {final_day.isoformat()} @ {GAME_TIME_MSK} –ú–°–ö.")

async def scheduled_game(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    force = context.job.data.get("force", False)
    today_msk = datetime.now(MSK).date()

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–µ–Ω—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ–≥–¥–∞
    if force:
        await launch_game(context.application, chat_id)
        return

    # –ò–Ω–∞—á–µ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –æ–∫–Ω–æ –¥–∞—Ç –∏ –ø–æ —É–∏–∫–µ–Ω–¥–∞–º
    if not in_window(today_msk) or today_msk.weekday() not in (5, 6):
        log.info("‚õî –ù–µ –≤—Ä–µ–º—è –¥–ª—è –º–∏–Ω–∏-–∏–≥—Ä—ã.")
        return

    await launch_game(context.application, chat_id)

# ---------- –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ ----------
async def launch_game(app: Application, chat_id: int):
    GAMES[chat_id] = new_game_state(chat_id)
    g = GAMES[chat_id]
    g["active"] = True
    g["round"] = 0

    intro = (
        "üåàüòÇ *–°–ª–∞–¥–æ—Å—Ç—å‚Ä¶ –∏–ª–∏ –ì–∞–¥–æ—Å—Ç—å?* üíÄüç¨\n\n"
        "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ–µ–µ–µ—Ç, —Å–º–µ—Ä—Ç–Ω—ã–µ! –Ø ‚Äî *–ó–≤–µ–∑–¥–∞ –†–∞–¥—É–≥–∏* üåà\n"
        "–ü—è—Ç—å –∑–ª–æ–≤–µ—â–∏—Ö –¥–æ–º–∏–∫–æ–≤ –∂–¥—É—Ç –≤–∞—Å‚Ä¶\n"
        "–û—Ç–≤–µ—á–∞–π—Ç–µ —Ä–µ–ø–ª–∞–µ–º: `—Å–ª–∞–¥–æ—Å—Ç—å` üç¨ –∏–ª–∏ `–≥–∞–¥–æ—Å—Ç—å` üíÄ\n"
        f"‚è± –í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç ‚Äî {fmt_duration(ROUND_SECONDS)}.\n\n"
        "–ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞... –ø–æ—Å—Ç—É—á–∏—Ç–µ—Å—å –≤ –ø–µ—Ä–≤—É—é –¥–≤–µ—Ä—å üö™"
    )

    # –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é; –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    sent = None
    try:
        img_path = Path(INTRO_IMAGE_PATH)
        if img_path.exists():
            with open(img_path, "rb") as f:
                sent = await app.bot.send_photo(
                    chat_id=chat_id,
                    photo=f,
                    caption=intro,
                    parse_mode=ParseMode.MARKDOWN
                )
    except Exception as e:
        log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å intro-–∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")

    if sent is None:
        sent = await app.bot.send_message(chat_id, intro, parse_mode=ParseMode.MARKDOWN)

    g["last_thread_id"] = sent.message_id
    await next_round(app, chat_id)

async def next_round(app: Application, chat_id: int):
    g = GAMES.get(chat_id)
    if not g or not g["active"]:
        return

    g["round"] += 1
    r = g["round"]
    if r > 5:
        await finish_game(app, chat_id)
        return

    g["answers"][r] = {}
    g["deadline_utc"] = datetime.now(UTC) + timedelta(seconds=ROUND_SECONDS)

    text = (
        f"üèö –î–æ–º {r}\n"
        "–°–ª–∞–¥–æ—Å—Ç—å üç¨ –∏–ª–∏ –ì–∞–¥–æ—Å—Ç—å üíÄ?\n"
        "(–æ—Ç–≤–µ—Ç—å—Ç–µ —Ä–µ–ø–ª–∞–µ–º –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        f"‚è± –£ –≤–∞—Å {fmt_duration(ROUND_SECONDS)}"
    )
    prompt = await app.bot.send_message(chat_id, text)
    g["prompt_msg_id"] = prompt.message_id
    g["last_thread_id"] = prompt.message_id

    app.job_queue.run_once(
        end_round,
        when=timedelta(seconds=ROUND_SECONDS),
        data={"chat_id": chat_id, "round": r},
        name=f"end_round_{chat_id}_{r}",
    )

async def end_round(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.data["chat_id"]
    r = context.job.data["round"]
    app = context.application
    g = GAMES.get(chat_id)
    if not g or not g["active"] or g["round"] != r:
        return

    truth = random.choice(["—Å–ª–∞–¥–æ—Å—Ç—å", "–≥–∞–¥–æ—Å—Ç—å"])
    votes = g["answers"].get(r, {})
    passed = {uid for uid, v in votes.items() if v["choice"] == truth}

    # –∫—Ç–æ –≤—ã–ª–µ—Ç–µ–ª –ò–ú–ï–ù–ù–û –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ (–∏–∑ —Ç–µ—Ö, –∫—Ç–æ –±—ã–ª –∂–∏–≤ –∏ –æ—Ç–≤–µ—Ç–∏–ª)
    if r == 1:
        prev_alive = set(votes.keys())
    else:
        prev_alive = (g["survivors"] or set()) & set(votes.keys())
    failed = prev_alive - passed

    # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∂–∏–≤—à–∏—Ö
    if r == 1:
        survivors = passed
    else:
        survivors = (g["survivors"] or set()) & passed
    g["survivors"] = survivors

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    for uid, v in votes.items():
        g["finalists_names"][uid] = v["name"]

    names_passed = [g["finalists_names"][uid] for uid in passed] if passed else []
    names_failed = [g["finalists_names"][uid] for uid in failed] if failed else []

    # –ò—Ç–æ–≥ –±–µ–∑ Markdown (—á—Ç–æ–±—ã –Ω–∏–∫–Ω–µ–π–º—ã —Å —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–µ –ª–æ–º–∞–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥)
    result = (
        f"üïØ –ó–∞ –¥–≤–µ—Ä—å—é –±—ã–ª–∞ {truth.upper()}!\n"
        f"–ü—Ä–æ—à–ª–∏ –¥–∞–ª—å—à–µ ({len(names_passed)}): {', '.join(names_passed) if names_passed else '–Ω–∏–∫—Ç–æ'}\n"
        f"–í—ã–ª–µ—Ç–µ–ª–∏ ({len(names_failed)}): {', '.join(names_failed) if names_failed else '‚Äî'}"
    )
    await app.bot.send_message(chat_id, result)

    if not survivors:
        await app.bot.send_message(chat_id, "üíÄ –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∂–∏–ª —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥‚Ä¶ –ü–æ–ø—Ä–æ–±—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —É–∏–∫–µ–Ω–¥!")
        g["active"] = False
        return

    await next_round(app, chat_id)

async def finish_game(app: Application, chat_id: int):
    g = GAMES.get(chat_id)
    survivors = list(g["survivors"] or [])
    names = [g["finalists_names"].get(uid, f'#{uid}') for uid in survivors]

    if len(survivors) == 0:
        text = "üéÉ –ù–∏–∫—Ç–æ –Ω–µ –¥–æ—à—ë–ª –¥–æ –∫–æ–Ω—Ü–∞... –ó–≤–µ–∑–¥–∞ –†–∞–¥—É–≥–∏ –∑–ª–æ—Ä–∞–¥–Ω–æ —Å–º–µ—ë—Ç—Å—è üòà"
    elif len(survivors) == 1:
        text = f"üåà –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {names[0]}! üç¨"
    elif len(survivors) == 2:
        text = f"‚öî –§–∏–Ω–∞–ª–∏—Å—Ç—ã: {names[0]} –∏ {names[1]}\n–ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É..."
        await app.bot.send_message(chat_id, text)
        result = coin()
        winner = names[0] if result == "–æ—Ä—ë–ª" else names[1]
        text = f"ü™ô –í—ã–ø–∞–ª {result.upper()}!\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner}! üéâ"
    else:
        text = f"üéÅ –§–∏–Ω–∞–ª–∏—Å—Ç–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ ({len(survivors)}). –í–ª–∞–¥–µ–ª—å—Ü—ã —Ä–µ—à–∞—Ç, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –∫–æ–Ω—Ñ–µ—Ç—ã üç¨."

    await app.bot.send_message(chat_id, text)
    g["active"] = False

# ---------- –ü—Ä–∏—ë–º –æ—Ç–≤–µ—Ç–æ–≤ ----------
async def collect_answers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    chat_id = update.effective_chat.id
    g = GAMES.get(chat_id)
    if not g or not g["active"]:
        return

    # –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ø–ª–∞–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç
    if not msg.reply_to_message or msg.reply_to_message.message_id != g["last_thread_id"]:
        return

    # –ù–µ –ø–æ–∑–∂–µ –¥–µ–¥–ª–∞–π–Ω–∞
    if datetime.now(UTC) > (g["deadline_utc"] or datetime.now(UTC)):
        return

    # –ø—Ä–∏–Ω–∏–º–∞–µ–º —Å–ª–æ–≤–∞ –∏ —ç–º–æ–¥–∑–∏
    text = norm(msg.text)
    aliases = {"üç¨": "—Å–ª–∞–¥–æ—Å—Ç—å", "üíÄ": "–≥–∞–¥–æ—Å—Ç—å"}
    text = aliases.get(text, text)

    if text not in {"—Å–ª–∞–¥–æ—Å—Ç—å", "–≥–∞–¥–æ—Å—Ç—å"}:
        return

    uid = msg.from_user.id
    # –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä–∞–Ω—å—à–µ –≤—ã–±—ã–ª ‚Äî –∏–≥–Ω–æ—Ä–∏–º (–∫—Ä–æ–º–µ 1-–≥–æ —Ä–∞—É–Ω–¥–∞)
    if g["survivors"] is not None and g["round"] > 1 and uid not in g["survivors"]:
        return

    g["answers"][g["round"]][uid] = {
        "choice": text,
        "name": display_name(msg.from_user)
    }

# ---------- main ----------
def main():
    if not BOT_TOKEN or not PORTAL_CHAT_ID:
        raise SystemExit("–ó–∞–ø–æ–ª–Ω–∏ BOT_TOKEN –∏ PORTAL_CHAT_ID –≤ .env!")

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # Safety: –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é
    if app.job_queue is None:
        jq = JobQueue()
        jq.set_application(app)
        jq.initialize()
        app.job_queue = jq

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("force_start", force_start))
    # üîπ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("force_stop", force_stop))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answers))

    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    app.post_init = schedule_jobs

    log.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üï∏")
    app.run_polling()

if __name__ == "__main__":
    main()
